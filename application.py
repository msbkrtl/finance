import os
from datetime import datetime
from flask import Flask, url_for, render_template, redirect
from cs50 import SQL
from flask import Flask, flash, jsonify, redirect, render_template, request, session
from flask_session import Session
from tempfile import mkdtemp
from werkzeug.exceptions import default_exceptions, HTTPException, InternalServerError
from werkzeug.security import check_password_hash, generate_password_hash
from helpers import apology, login_required, lookup, usd
import sqlite3


# make db return list instead of tuple
# conn.row_factory = lambda cursor, row: row[0]

# Configure application
app = Flask(__name__)
if __name__ == '__main__':
    app.run(debug=True)

# secret key generated by python
app.secret_key = os.environ.get("SECRET_KEY")

# adding continue to templates


# Ensure templates are auto-reloaded
app.config["TEMPLATES_AUTO_RELOAD"] = True

# Ensure responses aren't cached


@app.after_request
def after_request(response):
    response.headers["Cache-Control"] = "no-cache, no-store, must-revalidate"
    response.headers["Expires"] = 0
    response.headers["Pragma"] = "no-cache"
    return response


# Custom filter
app.jinja_env.filters["usd"] = usd

# Configure session to use filesystem (instead of signed cookies)
app.config["SESSION_FILE_DIR"] = mkdtemp()
app.config["SESSION_PERMANENT"] = False
app.config["SESSION_TYPE"] = "filesystem"
Session(app)

# Configure CS50 Library to use SQLite database
db = SQL("sqlite:///finance.db")

# Make sure API key is set
if not os.environ.get("API_KEY"):
    raise RuntimeError("API_KEY not set")


@app.route("/")
@login_required
def index():
    # connecting to the db
    conn = sqlite3.connect("finance.db")
    # make db return list instead of tuple
    conn.row_factory = lambda cursor, row: row[0]
    c = conn.cursor()

    # select stocks based on symbol and user_id provided by session and if there is no stock return has stocks 0
    symbols_of_shares = c.execute("SELECT DISTINCT(symbol) FROM transactions WHERE id = ?",
                                  [session["user_id"]]).fetchall()

    names_of_companies = c.execute("SELECT DISTINCT(name) FROM transactions WHERE id = ?",
                                   [session["user_id"]]).fetchall()

    # creating a lists to append data of the stocks
    num_of_shares = []
    prices = []
    total_value_of_stocks = []
    for i in range(len(symbols_of_shares)):
        num_of_shares.append(c.execute("SELECT SUM(amount) FROM transactions WHERE symbol = ? AND id = ?",
                                       [symbols_of_shares[i], session["user_id"]],).fetchone())
        prices.append(lookup(symbols_of_shares[i])["price"])
        total_value_of_stocks.append(prices[i] * num_of_shares[i])

    # end the function if user has no stock
    if len(num_of_shares) == 1 and num_of_shares[0] == 0 or len(num_of_shares) == 0:
        return render_template("index.html", has_stocks=0)
    # getting user's cash and adding it to the current_total
    cash_of_user = c.execute("Select cash FROM users WHERE id = ?",
                             [session["user_id"]]).fetchone()
    current_total = cash_of_user + sum(total_value_of_stocks)

    # checking if we have a stock that we own none
    is_zero = []
    for i in range(len(num_of_shares)):
        if num_of_shares[i] == 0:
            is_zero.append(i)
    if is_zero:
        for i in range(len(is_zero)):
            symbols_of_shares.pop(is_zero[i])
            names_of_companies.pop(is_zero[i])
            num_of_shares.pop(is_zero[i])
            prices.pop(is_zero[i])
            total_value_of_stocks.pop(is_zero[i])

    # change everything to usd
    current_total = usd(current_total)
    cash_of_user = usd(cash_of_user)
    for i in range(len(prices)):
        prices[i] = usd(prices[i])
        total_value_of_stocks[i] = usd(total_value_of_stocks[i])

    # putting the values for each stock in a dict
    context = {
        "symbols": symbols_of_shares,
        "names": names_of_companies,
        "share_numbers": num_of_shares,
        "prices": prices,
        "total_value_of_stocks": total_value_of_stocks
    }

    return render_template("index.html", context=context, money=cash_of_user, current_total=current_total, has_stocks=1)


@app.route("/buy", methods=["GET", "POST"])
@login_required
def buy():
    """Buy shares of stock"""
    if request.method == "POST":
        symbol = request.form["symbol"]
        number_of_shares_to_buy = request.form["share"]
        # checking for invalid inputs
        if symbol == "" or lookup(symbol) == None:
            return apology("Input blank or invalid symbol")
        if number_of_shares_to_buy == "":
            return apology("number of number_of_shares_to_buys cant be empty")
        if not str(number_of_shares_to_buy).isdigit():
            return apology("Only positive numbers")
        if float(number_of_shares_to_buy) < 1.0:
            return apology("Number of shares to buys must be positive number")

        # getting the stock info and calculating the value of whole buy
        stock = lookup(symbol)
        total_buy = stock["price"] * float(number_of_shares_to_buy)

        # connecting to db
        conn = sqlite3.connect("finance.db")
        conn.row_factory = lambda cursor, row: row[0]
        c = conn.cursor()

        # getting the cash of user
        c.execute("Select cash FROM users WHERE id = ?",
                  [session["user_id"]])
        cash_of_user = c.fetchone()

        # check if the user can afford to buy stock and calculate cost of the stocks
        if cash_of_user < total_buy:
            return apology("Not enough cash")
        cost_of_stocks = cash_of_user - total_buy

        # update user's cash
        c.execute("UPDATE users SET cash = ? WHERE id = ?",
                  [cost_of_stocks, session["user_id"]])
        transaction_date = datetime.now().strftime('%Y-%m-%d %H:%M:%S')

        # update the db table of transactions depening on the value
        c.execute("INSERT INTO transactions (id, name, symbol, price, amount, time) VALUES(?,?,?,?,?,?);",
                  [session["user_id"], stock["name"], stock["symbol"], stock["price"], float(number_of_shares_to_buy), transaction_date])
        # commit and close the db
        flash(
            f"Bought {number_of_shares_to_buy} shares {stock['name']} at the price of {stock['price']}!", "success")
        conn.commit()


        return redirect(url_for("index"))
        # TODO ADD COMMIT CLOSE TO ALL FUNCTIONS
    return render_template("buy.html")


@app.route("/history")
@login_required
def history():
    """Show history of transactions"""
    # connect to db
    conn = sqlite3.connect("finance.db")
    c = conn.cursor()

    # get the data of each transaction
    transactions = c.execute("SELECT name,symbol, price, amount, time  FROM transactions WHERE id = ?",
                             [session["user_id"]]).fetchall()

    # a lambda function to sort list of tuples according to the 4 element of the tuple
    transactions = sorted(transactions, key=lambda x: x[4], reverse=True)

    return render_template("history.html", transactions=transactions)


@app.route("/login", methods=["GET", "POST"])
def login():
    """Log user in"""

    # Forget any user_id
    session.clear()

    # User reached route via POST (as by submitting a form via POST)
    if request.method == "POST":

        # Ensure username was submitted
        if not request.form.get("username"):
            return apology("must provide username", 403)

        # Ensure password was submitted
        elif not request.form.get("password"):
            return apology("must provide password", 403)

        # Query database for username
        rows = db.execute(
            "SELECT * FROM users WHERE username = :username",
            username=request.form.get("username"),
        )

        # Ensure username exists and password is correct
        if len(rows) != 1 or not check_password_hash(
            rows[0]["hash"], request.form.get("password")
        ):
            return apology("invalid username and/or password", 403)

        # Remember which user has logged in
        session["user_id"] = rows[0]["id"]

        # Redirect user to home page
        return redirect("/")

    # User reached route via GET (as by clicking a link or via redirect)
    else:
        return render_template("login.html")


@app.route("/logout")
def logout():
    """Log user out"""

    # Forget any user_id
    session.clear()

    # Redirect user to login form
    return redirect("/")


@app.route("/quote", methods=["GET", "POST"])
@login_required
def quote():
    """Get stock quote."""
    # getting the stock and returning quoted.html
    if request.method == "POST":
        symbol = request.form["symbol"]
        stock = lookup(symbol)
        if not stock:
            flash("Invalid or wrong symbol!")
            return render_template("quote.html", stock=stock)
        return render_template("quoted.html", stock=stock)
    return render_template("quote.html", stock="Quote")


@app.route("/register", methods=["GET", "POST"])
def register():
    # check is the method is post and get user info from forms
    if request.method == "POST":
        username = request.form["username"]
        password = request.form["password"]
        confirm = request.form["confirm"]

        # checking for invalid input and wrong input
        if username == "":
            return apology("username empty")
        if password == "":
            return apology("password empty")
        if password != confirm:
            return apology("passwords doesn't match")

        isalpha = 0
        numeric = 0
        symbol = 0
        for i in range(len(password)):

            if password[i].isalpha():
                isalpha += 1
            elif password[i].isdigit():
                numeric += 1
            else:
                symbol += 1

        print(isalpha)
        print(numeric)
        print(symbol)
        if not (isalpha > 2 and numeric > 0 and symbol > 0):
            return apology("Password must have at least 3 letters and include numbers and symbols.")
        # open the db
        conn = sqlite3.connect("finance.db")
        c = conn.cursor()

        # check if username already taken if it is taken return apology
        try:
            c.execute("INSERT INTO users (username,hash) VALUES (?,?)",
                      (username, generate_password_hash(password)))
        except sqlite3.IntegrityError as err:
            return apology("username already taken")

        # closing the db
        conn.commit()


        return render_template("login.html")

    return render_template("register.html", title="Register")


@app.route("/sell", methods=["GET", "POST"])
@login_required
def sell():
    """Sell shares of stock"""
    # connecting to database
    conn = sqlite3.connect("finance.db")
    conn.row_factory = lambda cursor, row: row[0]
    c = conn.cursor()

    # getting symbols of the stocks user has
    stock_symbols = c.execute("SELECT DISTINCT(symbol) FROM transactions WHERE id = ?;",
                              [session["user_id"]]).fetchall()

    if request.method == "POST":
        select_value = request.form["symbols"]
        number_of_shares = int(request.form["number_of_shares"])

        # if user did not select stock or tried to input something wasn't there return apology
        if select_value not in stock_symbols or select_value == "Select":
            return apology("Wrong stock or didn't select stock")

        # getting data from db about stocks and updating cash of the user and add the transaction
        stock_infos = lookup(select_value)
        amount_of_stocks = c.execute("SELECT SUM(amount) FROM transactions WHERE symbol = ? AND id = ?",
                                     [select_value, session["user_id"]]).fetchall()[0]

        # invalid number
        if not str(number_of_shares).isdigit() or number_of_shares == 0:
            return apology("Invalid number input")

        # if the user has enough shares
        number_of_shares = int(number_of_shares)
        if number_of_shares > amount_of_stocks:
            flash(
                f"You only have {amount_of_stocks} shares of {stock_infos['name']}", "error")
            return render_template("sell.html", stock_symbols=stock_symbols)
        transaction_date = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        c.execute("INSERT INTO transactions(id,name,symbol,price,amount,time) VALUES (?,?,?,?,?,?);",
                  [session["user_id"], stock_infos["name"], select_value, stock_infos["price"], -float(number_of_shares), transaction_date])
        c.execute("UPDATE users SET cash = cash + ? WHERE  id = ?",
                  [float(number_of_shares) * stock_infos["price"], session["user_id"]])

        # flash a sold message depending on the number of shares sold
        if number_of_shares == 1:
            flash(
                f"Sold a share of {stock_infos['name']} at the price of {stock_infos['price']}!", "success")
        else:
            flash(
                f"Sold {number_of_shares} shares of {stock_infos['name']} at the price of {stock_infos['price']}!", "success")

        # close the db
        conn.commit()


        return render_template("sell.html", stock_symbols=stock_symbols)

    return render_template("sell.html", stock_symbols=stock_symbols)


def errorhandler(e):
    """Handle error"""
    if not isinstance(e, HTTPException):
        e = InternalServerError()
    return apology(e.name, e.code)


# Listen for errors
for code in default_exceptions:
    app.errorhandler(code)(errorhandler)
